# Pipeline to perform automated github release of our components

# Disable branch and pr triggers - run this manually when ready to publish a new release
trigger:
- none
pr:
- none

pool: dotestlab

variables:
  Release.Version: $(release_version)
  Release.PreviousVersion: $(previous_release_version) # Select the previous version, used to generate changelog
  Release.Title: $(title) # title of the release, following <Release.Version> (YYYY-MM-DD) format i.e. 0.6.0 (2021-03-02)

parameters:
  - name: SkipPublishing
    displayName: Skip publishing step
    type: boolean
    values: 
    - true
    - false

stages:
- stage: release_build
  jobs:
  - job: deliveryoptimization_agent_ubuntu1804_amd64
    steps:
    - template: ../build/templates/doclient-lite-native-steps.yml
      parameters:
        targetOsArch: 'ubuntu1804-x64'
        config: release
        skipTests: true 
  - job: deliveryoptimization_agent_ubuntu1804_arm64
    steps:
    - template: ../build/templates/doclient-lite-docker-steps.yml
      parameters:
        targetOsArch: ubuntu1804-arm64
        dockerImageName: 'jimsonmsft/ubuntu18.04-arm64:latest'
        config: release
  - job: deliveryoptimization_agent_debian10_arm32
    steps:
    - template: ../build/templates/doclient-lite-docker-steps.yml
      parameters:
        targetOsArch: debian10-arm32
        dockerImageName: 'jimsonmsft/debian10-arm32:latest'
        config: release
  - job: deliveryoptimization_agent_debian9_arm32
    steps:
    - template: ../build/templates/doclient-lite-docker-steps.yml
      parameters:
        targetOsArch: debian9-arm32
        dockerImageName: 'jimsonmsft/debian9-arm32:latest'
        config: release

  - job: libdeliveryoptimization_ubuntu1804_amd64
    steps:
    - template: ../build/templates/dosdkcpp-native-steps.yml
      parameters:
        targetOsArch: 'ubuntu1804-x64'
        config: release
        skipTests: true 
  - job: libdeliveryoptimization_ubuntu1804_arm64
    steps:
    - template: ../build/templates/dosdkcpp-docker-steps.yml
      parameters:
        targetOsArch: ubuntu1804-arm64
        dockerImageName: 'jimsonmsft/ubuntu18.04-arm64:latest'
        config: release
  - job: libdeliveryoptimization_debian10_arm32
    steps:
    - template: ../build/templates/dosdkcpp-docker-steps.yml
      parameters:
        targetOsArch: debian10-arm32
        dockerImageName: 'jimsonmsft/debian10-arm32:latest'
        config: release
  - job: libdeliveryoptimization_debian9_arm32
    steps:
    - template: ../build/templates/dosdkcpp-docker-steps.yml
      parameters:
        targetOsArch: debian9-arm32
        dockerImageName: 'jimsonmsft/debian9-arm32:latest'
        config: release

  - job: deliveryoptimization_plugin_apt_ubuntu1804_amd64
    steps:
    - template: ../build/templates/dopapt-native-steps.yml
      parameters:
        targetOsArch: 'ubuntu1804-x64'
        config: release
  - job: deliveryoptimization_plugin_apt_ubuntu1804_arm64
    steps:
    - template: ../build/templates/dopapt-docker-steps.yml
      parameters:
        targetOsArch: ubuntu1804-arm64
        dockerImageName: 'jimsonmsft/ubuntu18.04-arm64:latest'
        config: release
  - job: deliveryoptimization_plugin_apt_debian10_arm32
    steps:
    - template: ../build/templates/dopapt-docker-steps.yml
      parameters:
        targetOsArch: debian10-arm32
        dockerImageName: 'jimsonmsft/debian10-arm32:latest'
        config: release
  - job: deliveryoptimization_plugin_apt_debian9_arm32
    steps:
    - template: ../build/templates/dopapt-docker-steps.yml
      parameters:
        targetOsArch: debian9-arm32
        dockerImageName: 'jimsonmsft/debian9-arm32:latest'
        config: release

- stage: release
  condition: succeeded()
  jobs:
  - job: github_release
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'specific'
        downloadPath: '$(Build.ArtifactStagingDirectory)'

    - task: CmdLine@2
      inputs:
        script: |
          echo Release title: $(Release.Title)
          echo Release tag: $(Release.Version)
          echo Tag used to generate changelog: $(Release.PreviousVersion)
          echo Directory to be published: $(Build.ArtifactStagingDirectory)
          echo Content to be published:
          ls -lR $(Build.ArtifactStagingDirectory)
      displayName: Release Information
    - task: GitHubRelease@1
      condition: eq(${{parameters.SkipPublishing}}, false)
      inputs:
        gitHubConnection: 'client2'
        repositoryName: 'microsoft/do-client'
        action: 'create'
        assets: '$(Build.ArtifactStagingDirectory)/**/*-release/*.deb'
        tagSource: 'userSpecifiedTag'
        tag: '$(Release.Version)'
        title: '$(Release.Title)'
        isPreRelease: true
        changeLogCompareToRelease: 'lastNonDraftReleaseByTag'
        changeLogCompareToReleaseTag: '$(Release.PreviousVersion)'
        changeLogType: 'commitBased'