# Pipeline to perform automated github release of our components

# Disable branch and pr triggers - run this manually when ready to publish a new release
trigger:
- none
pr:
- none

pool: dotestlab

variables:
  Release.Version: $(release_version)
  Release.PreviousVersion: $(previous_release_version) # Select the previous version, used to generate changelog
  Release.Title: $(title) # title of the release, following <Release.Version> (YYYY-MM-DD) format i.e. 0.6.0 (2021-03-02)

parameters:
  - name: SkipPublishing
    displayName: Build only (skip release stage)
    type: boolean
    values: 
    - true
    - false

stages:
- stage: clean_build
  jobs:
  - job: deliveryoptimization_agent
    steps:
    - template: ../build/templates/doclient-lite-native-steps.yml
      parameters:
        targetOsArch: 'ubuntu1804-x64'
        config: release
        skipTests: true 
  #   - template: ../build/templates/doclient-lite-docker-steps.yml
  #     parameters:
  #       targetOsArch: debian10-arm32
  #       dockerImageName: 'jimsonmsft/debian10-arm32:latest'
  #       config: release
  #   - template: ../build/templates/doclient-lite-docker-steps.yml
  #     parameters:
  #       targetOsArch: debian9-arm32
  #       dockerImageName: 'jimsonmsft/debian9-arm32:latest'
  #       config: release
  #   - template: ../build/templates/doclient-lite-docker-steps.yml
  #     parameters:
  #       targetOsArch: ubuntu1804-arm64
  #       dockerImageName: 'jimsonmsft/ubuntu18.04-arm64:latest'
  #       config: release

  # - job: libdeliveryoptimization
  #   steps:
  #   - template: ../build/templates/dosdkcpp-native-steps.yml
  #     parameters:
  #       targetOsArch: 'ubuntu1804-x64'
  #       config: release
  #       skipTests: true 
  #   - template: ../build/templates/dosdkcpp-docker-steps.yml
  #     parameters:
  #       targetOsArch: debian10-arm32
  #       dockerImageName: 'jimsonmsft/debian10-arm32:latest'
  #       config: release
  #   - template: ../build/templates/dosdkcpp-docker-steps.yml
  #     parameters:
  #       targetOsArch: debian9-arm32
  #       dockerImageName: 'jimsonmsft/debian9-arm32:latest'
  #       config: release
  #   - template: ../build/templates/dosdkcpp-docker-steps.yml
  #     parameters:
  #       targetOsArch: ubuntu1804-arm64
  #       dockerImageName: 'jimsonmsft/ubuntu18.04-arm64:latest'
  #       config: release

  # - job: deliveryoptimization_plugin_apt
  #   steps:
  #   - template: ../build/templates/dopapt-native-steps.yml
  #     parameters:
  #       targetOsArch: 'ubuntu1804-x64'
  #       config: release
  #   - template: ../build/templates/dopapt-docker-steps.yml
  #     parameters:
  #       targetOsArch: debian10-arm32
  #       dockerImageName: 'jimsonmsft/debian10-arm32:latest'
  #       config: release
  #   - template: ../build/templates/dopapt-docker-steps.yml
  #     parameters:
  #       targetOsArch: debian9-arm32
  #       dockerImageName: 'jimsonmsft/debian9-arm32:latest'
  #       config: release
  #   - template: ../build/templates/dopapt-docker-steps.yml
  #     parameters:
  #       targetOsArch: ubuntu1804-arm64
  #       dockerImageName: 'jimsonmsft/ubuntu18.04-arm64:latest'
  #       config: release

- stage: dry-run
  condition: and(succeeded(), eq('${{parameters.SkipPublishing}}', true))
  jobs:
  - job: dry-run
    steps:
      - task: CmdLine@2
        inputs:
          script: |
            echo Release Title: $(Release.Title)
            echo Release Tag: $(Release.Version)
            echo Changelog generated from previous tag: $(Release.PreviousVersion)
            echo Content to be published:
            ls -l $(Build.ArtifactStagingDirectory)

- stage: release
  condition: and(succeeded(), eq('${{parameters.SkipPublishing}}', false))
  jobs:
  - job: github_release
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        targetPath: '$(Build.ArtifactStagingDirectory)'
    - task: GitHubRelease@1
      inputs:
        gitHubConnection: 'client2'
        repositoryName: 'microsoft/do-client'
        action: 'create'
        assets: '$(Build.ArtifactStagingDirectory)/**/*-release/*.deb'
        tagSource: 'userSpecifiedTag'
        tag: '$(Release.Version)'
        title: '$(Release.Title)'
        isPreRelease: true
        changeLogCompareToRelease: 'lastNonDraftReleaseByTag'
        changeLogCompareToReleaseTag: '$(Release.PreviousVersion)'
        changeLogType: 'commitBased'