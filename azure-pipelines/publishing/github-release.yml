# Pipeline to perform automated github release of our components

# Disable branch and pr triggers - run this manually when ready to publish a new release
trigger:
- none
pr:
- none

variables:
  Release.Version: $(release_version) # Example: v1.1.1
  Release.PreviousVersion: $(previous_release_version) # Used to generate changelog. Example: v1.1.0
  Release.Title: $(title) # Example: v1.1.1 (2023-11-15)
  containerImageVersion: '0.9.0'

parameters:
- name: buildTargets
  displayName: "OS and Architectures to build"
  type: object
  default:
    - debian10_arm32
    - debian10_arm64
    - debian10_x64
    - debian11_arm32
    - debian11_arm64
    - debian11_x64
    - ubuntu1804_arm64
    - ubuntu1804_x64
    - ubuntu2004_arm64
    - ubuntu2004_x64
    - ubuntu2204_arm64
    - ubuntu2204_x64

- name: SkipPublishing
  displayName: Skip publishing step
  type: boolean
  values:
  - true
  - false
  default: true   # Intentionally default to true to prevent accidental publishing. Update via AzDO pipeline 'Run' UX when ready to publish.

- name: PublishAsDraft
  displayName: Publish as draft
  type: boolean
  values:
  - true
  - false
  default: true

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool:
      name: Azure-Pipelines-1ESPT-ExDShared
      image: ubuntu-latest
      os: linux
    sdl:
      sourceAnalysisPool:
        name: Azure-Pipelines-1ESPT-ExDShared
        image: windows-latest
        os: windows
      suppression:
        suppressionFile: $(Build.SourcesDirectory)\guardian\SDL\.gdnsuppress
    customBuildTags:
    - ES365AIMigrationTooling

    stages:
    - stage: pre_build
      jobs:
      - job: print_variables
        steps:
        - task: CmdLine@2
          inputs:
            script: |
              echo "Release title: $(Release.Title)"
              echo "Release tag: $(Release.Version)"
              echo "Tag used to generate changelog: $(Release.PreviousVersion)"
              echo "Suppress file:"
              ls -l $(Build.SourcesDirectory)/guardian/SDL/.gdnsuppress

    - stage: build
      jobs:
      - ${{ each target in parameters.buildTargets }}:
        - job: build_${{ target }}
          steps:
          - template: /azure-pipelines/build/linux/du/templates/doclient-lite-docker-steps.yml@self
            parameters:
              targetOsArch: ${{ target }}
              imageVersion: ${{ variables.containerImageVersion }}
              config: minsizerel
              skipTests: true

          - template: /azure-pipelines/build/linux/du/templates/dosdkcpp-docker-steps.yml@self
            parameters:
              targetOsArch: ${{ target }}
              imageVersion: ${{ variables.containerImageVersion }}
              config: minsizerel
              skipTests: true

          - template: /azure-pipelines/build/linux/du/templates/dopapt-docker-steps.yml@self
            parameters:
              targetOsArch: ${{ target }}
              imageVersion: ${{ variables.containerImageVersion }}
              config: minsizerel
              skipTests: true

          - task: CopyFiles@2
            displayName: 'Copy .deb files'
            inputs:
              SourceFolder: '/tmp'
              Contents: |
                build-deliveryoptimization-*-${{ target }}/linux-minsizerel/*.deb
              TargetFolder: '/tmp/${{ target }}'
              CleanTargetFolder: true

          - task: ArchiveFiles@2
            displayName: 'Create .tar file'
            inputs:
              rootFolderOrFile: /tmp/${{ target }}
              includeRootFolder: False
              archiveType: tar
              archiveFile: $(Build.ArtifactStagingDirectory)/release-assets/${{ target }}-packages.tar

          templateContext:
            outputs:
            - output: pipelineArtifact
              displayName: 'Publish artifacts'
              targetPath: '$(Build.ArtifactStagingDirectory)'
              artifact: 'doclient-drop-${{ target }}'

    - stage: release
      condition: succeeded()
      jobs:
      - job: github_release
        steps:
        - task: DownloadBuildArtifacts@1
          inputs:
            buildType: 'current'
            downloadType: 'specific'
            itemPattern: '**/*-packages.tar'
            downloadPath: '$(Build.ArtifactStagingDirectory)'

        - task: CmdLine@2
          displayName: 'List downloaded files and stage'
          inputs:
            script: |
              shopt -s globstar
              ls -lR $(Build.ArtifactStagingDirectory)
              mkdir -p $(Build.ArtifactStagingDirectory)/release-assets-all
              cp $(Build.ArtifactStagingDirectory)/**/*.tar $(Build.ArtifactStagingDirectory)/release-assets-all

        - task: CmdLine@2
          displayName: List all tarballs
          inputs:
            workingDirectory: $(Build.ArtifactStagingDirectory)/release-assets-all
            script: |
              shopt -s globstar
              echo Content to be hashed:
              ls -l *.tar

        - task: Bash@3
          displayName: Compute hashes
          inputs:
            targetType: 'inline'
            workingDirectory: $(Build.ArtifactStagingDirectory)/release-assets-all
            script: 'sha256sum ./*.tar > hashes_sha256.txt'

        - task: Bash@3
          displayName: List tarballs and hashes
          inputs:
            targetType: 'inline'
            workingDirectory: $(Build.ArtifactStagingDirectory)/release-assets-all
            script: |
              cat hashes_sha256.txt
              echo Content of current dir:
              ls -l

        - task: GitHubRelease@1
          condition: eq(${{parameters.SkipPublishing}}, false)
          inputs:
            gitHubConnection: 'github_gauth'
            repositoryName: 'microsoft/do-client'
            action: 'create'
            assets: |
              $(Build.ArtifactStagingDirectory)/release-assets-all/*.tar
              $(Build.ArtifactStagingDirectory)/release-assets-all/hashes*.txt
            tagSource: 'userSpecifiedTag'
            tag: '$(Release.Version)'
            title: '$(Release.Title)'
            isPreRelease: true
            isDraft: ${{parameters.PublishAsDraft}}
            changeLogCompareToRelease: 'lastNonDraftReleaseByTag'
            changeLogCompareToReleaseTag: '$(Release.PreviousVersion)'
            changeLogType: 'commitBased'