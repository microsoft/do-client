# This Yaml Document has been converted by ESAI Yaml Pipeline Conversion Tool.
# Please make sure to check all the converted content, it is your team's responsibility to make sure that the pipeline is still valid and functions as expected.
# This pipeline will be extended to the OneESPT template
# If you are not using the E+D shared hosted pool with windows-2022, replace the pool section with your hosted pool, os, and image name. If you are using a Linux image, you must specify an additional windows image for SDL: https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/1es-pipeline-templates/features/sdlanalysis/overview#how-to-specify-a-windows-pool-for-the-sdl-source-analysis-stage
trigger:
- none
pr:
- none
variables:
  Release.Version: $(release_version)
  Release.PreviousVersion: $(previous_release_version)
  Release.Title: $(title)
  imageVersion: '0.8.0'
  containerImageVersion: '0.9.0'
parameters:
- name: SkipPublishing
  displayName: Skip publishing step
  type: boolean
  values:
  - true
  - false
  default: true
- name: PublishAsDraft
  displayName: Publish as draft
  type: boolean
  values:
  - true
  - false
  default: true
resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release
extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool:
      name: Azure-Pipelines-1ESPT-ExDShared
      image: ubuntu-latest
      os: linux
    sdl:
      sourceAnalysisPool:
        name: Azure-Pipelines-1ESPT-ExDShared
        image: windows-latest
        os: windows
    customBuildTags:
    - ES365AIMigrationTooling
    stages:
    - stage: pre_build
      jobs:
      - job: print_variables
        steps:
        - task: CmdLine@2
          inputs:
            script: |
              echo "Release title: $(Release.Title)"
              echo "Release tag: $(Release.Version)"
              echo "Tag used to generate changelog: $(Release.PreviousVersion)"
    - stage: release_build
      jobs:
      # - template: /azure-pipelines/publishing/templates/release-native-build-steps.yml@self
      #   parameters:
      #     targetOsArch: 'ubuntu1804_x64'
      # - template: /azure-pipelines/publishing/templates/release-docker-build-steps.yml@self
      #   parameters:
      #     targetOsArch: 'ubuntu1804_arm64'
      #     imageVersion: ${{variables.containerImageVersion}}
      - template: /azure-pipelines/publishing/templates/release-docker-build-steps.yml@self
        parameters:
          targetOsArch: 'ubuntu2004_x64'
          imageVersion: ${{variables.containerImageVersion}}
      # - template: /azure-pipelines/publishing/templates/release-docker-build-steps.yml@self
      #   parameters:
      #     targetOsArch: 'ubuntu2004_arm64'
      #     imageVersion: ${{variables.containerImageVersion}}
      - template: /azure-pipelines/publishing/templates/release-docker-build-steps.yml@self
        parameters:
          targetOsArch: 'ubuntu2204_x64'
          imageVersion: ${{variables.containerImageVersion}}
      # - template: /azure-pipelines/publishing/templates/release-docker-build-steps.yml@self
      #   parameters:
      #     targetOsArch: 'ubuntu2204_arm64'
      #     imageVersion: ${{variables.containerImageVersion}}
      # - template: /azure-pipelines/publishing/templates/release-docker-build-steps.yml@self
      #   parameters:
      #     targetOsArch: 'debian10_arm32'
      #     imageVersion: ${{variables.containerImageVersion}}
      # - template: /azure-pipelines/publishing/templates/release-docker-build-steps.yml@self
      #   parameters:
      #     targetOsArch: 'debian10_arm64'
      #     imageVersion: ${{variables.containerImageVersion}}
      - template: /azure-pipelines/publishing/templates/release-docker-build-steps.yml@self
        parameters:
          targetOsArch: 'debian10_x64'
          imageVersion: ${{variables.containerImageVersion}}
      # - template: /azure-pipelines/publishing/templates/release-docker-build-steps.yml@self
      #   parameters:
      #     targetOsArch: 'debian11_arm32'
      #     imageVersion: ${{variables.containerImageVersion}}
      # - template: /azure-pipelines/publishing/templates/release-docker-build-steps.yml@self
      #   parameters:
      #     targetOsArch: 'debian11_arm64'
      #     imageVersion: ${{variables.containerImageVersion}}
      - template: /azure-pipelines/publishing/templates/release-docker-build-steps.yml@self
        parameters:
          targetOsArch: 'debian11_x64'
          imageVersion: ${{variables.containerImageVersion}}
    - stage: release
      condition: succeeded()
      jobs:
      - job: github_release
        steps:
        - task: DownloadBuildArtifacts@1
          inputs:
            buildType: 'current'
            downloadType: 'specific'
            itemPattern: '**/*-packages.tar'
            downloadPath: '$(Build.ArtifactStagingDirectory)'
        - task: CmdLine@2
          inputs:
            script: |
              echo "Directory to be published: $(Build.ArtifactStagingDirectory)"
              echo Content to be published:
              ls -lR $(Build.ArtifactStagingDirectory)/**/*.tar
          displayName: Release Information
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: 'sha256sum ./*.tar > ../hashes_sha256.txt'
            workingDirectory: $(Build.ArtifactStagingDirectory)
          displayName: Compute hashes of archive files
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: 'cat ./hashes_sha256.txt'
            workingDirectory: $(Build.ArtifactStagingDirectory)
          displayName: Display hashes of archive files
        - task: GitHubRelease@1
          condition: eq(${{parameters.SkipPublishing}}, false)
          inputs:
            gitHubConnection: 'github_gauth'
            repositoryName: 'microsoft/do-client'
            action: 'create'
            assets: |
              $(Build.ArtifactStagingDirectory)/**/*.tar
              $(Build.ArtifactStagingDirectory)/hashes*.txt
            tagSource: 'userSpecifiedTag'
            tag: '$(Release.Version)'
            title: '$(Release.Title)'
            isPreRelease: true
            isDraft: ${{parameters.PublishAsDraft}}
            changeLogCompareToRelease: 'lastNonDraftReleaseByTag'
            changeLogCompareToReleaseTag: '$(Release.PreviousVersion)'
            changeLogType: 'commitBased'