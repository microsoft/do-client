# Template: Steps to build all components for a specific OS
# Consume this steps template in one or more jobs by passing in parameter values.

parameters:
- name: targetOsArch    # example: ubuntu2004_arm64
  type: string
- name: imageVersion
  type: string

jobs:
- job: ${{parameters.targetOsArch}}
  steps:
  - checkout: self
    path: 's' # Copy to sources directory (templates do not do this automatically)

  - template: /azure-pipelines/build/linux/du/templates/doclient-lite-docker-steps.yml@self
    parameters:
      targetOsArch: ${{parameters.targetOsArch}}
      imageVersion: ${{parameters.imageVersion}}
      config: minsizerel
  - task: CopyFiles@2
    inputs:
      SourceFolder: '/tmp/build-deliveryoptimization-agent-${{parameters.targetOsArch}}/linux-minsizerel'
      Contents: |
        *.deb
      TargetFolder: '/tmp/${{parameters.targetOsArch}}'
      CleanTargetFolder: true
    displayName: 'Copy agent .deb file'

  - template: /azure-pipelines/build/linux/du/templates/dosdkcpp-docker-steps.yml@self
    parameters:
      targetOsArch: ${{parameters.targetOsArch}}
      imageVersion: ${{parameters.imageVersion}}
      config: minsizerel
  - task: CopyFiles@2
    inputs:
      SourceFolder: '/tmp/build-deliveryoptimization-sdk-${{parameters.targetOsArch}}/linux-minsizerel'
      Contents: |
        *.deb
      TargetFolder: '/tmp/${{parameters.targetOsArch}}'
      CleanTargetFolder: false
    displayName: 'Copy sdk .deb files'

  - template: /azure-pipelines/build/linux/du/templates/dopapt-docker-steps.yml@self
    parameters:
      targetOsArch: ${{parameters.targetOsArch}}
      imageVersion: ${{parameters.imageVersion}}
      config: minsizerel
  - task: CopyFiles@2
    inputs:
      SourceFolder: '/tmp/build-deliveryoptimization-plugin-apt-${{parameters.targetOsArch}}/linux-minsizerel'
      Contents: |
        *.deb
      TargetFolder: '/tmp/${{parameters.targetOsArch}}'
      CleanTargetFolder: false
    displayName: 'Copy plugin .deb file'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: /tmp/${{parameters.targetOsArch}}
      includeRootFolder: False
      archiveType: tar
      archiveFile: $(Build.ArtifactStagingDirectory)/release-assets/${{parameters.targetOsArch}}-packages.tar
    displayName: 'Create .tar file'

  templateContext:
    outputs:
    - output: pipelineArtifact
      displayName: 'Publish artifacts'
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifact: 'doclient-drop-${{parameters.targetOsArch}}'
