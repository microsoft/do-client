# Template: Steps to build DO C++ SDK using docker to target non-native OS and/or architecture.
# Consume this steps template in one or more jobs by passing in parameter values.

parameters:
- name: targetOsArch    # example: ubuntu2004_arm64
  type: string
- name: imageVersion
  type: string
- name: config          # debug/release
  type: string
- name: skipTests
  type: boolean

steps:
- task: Docker@2
  displayName: Login to ACR
  inputs:
    command: login
    containerRegistry: doclient-dockercontainerregistry-buildpipeline   # name of the service connection that connect the pipeline to the ACR
    repository: $(parameters.targetOsArch)

- task: Docker@2
  displayName: Pull latest build image
  inputs:
    command: pull
    containerRegistry: doclient-dockercontainerregistry-buildpipeline   # name of the service connection that connect the pipeline to the ACR
    arguments: 'doclientcontainerregistry.azurecr.io/${{parameters.targetOsArch}}:${{parameters.imageVersion}}'

- task: CmdLine@2
  inputs:
    script: 'sudo docker run --rm --privileged multiarch/qemu-user-static --reset -p yes'
  displayName: Enable the build VM to run multiarch docker container

- task: CmdLine@2
  condition: eq('${{parameters.skipTests}}', false)
  inputs:
    script: 'sudo docker run --rm --entrypoint=python3 -v $(Build.SourcesDirectory):/code -v /tmp/build-deliveryoptimization-agent-${{parameters.targetOsArch}}:/tmp/build-deliveryoptimization-agent doclientcontainerregistry.azurecr.io/${{parameters.targetOsArch}}:${{parameters.imageVersion}} "/code/build/build.py" "--clean" "--package-for" "DEB" "--config" "${{parameters.config}}" "--project" "agent"'
  displayName: 'Build agent ${{parameters.targetOsArch}}-${{parameters.config}}'

- task: CmdLine@2
  condition: eq('${{parameters.skipTests}}', false)
  inputs:
    script: 'sudo dpkg -i /tmp/build-deliveryoptimization-agent-${{parameters.targetOsArch}}/linux-${{parameters.config}}/deliveryoptimization-agent*.deb'
    workingDirectory: '/tmp/build-deliveryoptimization-agent-${{parameters.targetOsArch}}/linux-${{parameters.config}}'
  displayName: 'Install agent Debian package'

- task: CmdLine@2
  inputs:
    script: 'sudo docker run --rm --entrypoint=python3 -v $(Build.SourcesDirectory):/code -v /tmp/build-deliveryoptimization-sdk-${{parameters.targetOsArch}}:/tmp/build-deliveryoptimization-sdk doclientcontainerregistry.azurecr.io/${{parameters.targetOsArch}}:${{parameters.imageVersion}} "/code/build/build.py" "--clean" "--package-for" "DEB" "--config" "${{parameters.config}}" "--project" "sdk"'
  displayName: 'Build sdk-cpp ${{parameters.targetOsArch}}-${{parameters.config}}'

- task: Bash@3
  condition: eq('${{parameters.config}}', 'minsizerel')
  inputs:
    targetType: 'filePath'
    filePath: 'build/scripts/check_binary_size.sh'
    arguments: '596080 /tmp/build-deliveryoptimization-sdk-${{parameters.targetOsArch}}/linux-${{parameters.config}}/sdk-cpp/libdeliveryoptimization.so.*.*.?'
  displayName: 'Limit binary size increase'

- task: CmdLine@2
  condition: eq('${{parameters.skipTests}}', false)
  inputs:
    script: 'sudo dpkg -i /tmp/build-deliveryoptimization-sdk-${{parameters.targetOsArch}}/linux-${{parameters.config}}/libdeliveryoptimization*.deb'
    workingDirectory: '/tmp/build-deliveryoptimization-sdk-${{parameters.targetOsArch}}/linux-${{parameters.config}}'
  displayName: 'Install libdeliveryoptimization'

- task: CmdLine@2
  condition: eq('${{parameters.skipTests}}', false)
  inputs:
    script: 'sudo ./sdk-cpp/tests/deliveryoptimization-sdk-tests'
    workingDirectory: '/tmp/build-deliveryoptimization-sdk-${{parameters.targetOsArch}}/linux-${{parameters.config}}'
  displayName: 'Run unit tests'

- task: CmdLine@2
  condition: eq('${{parameters.skipTests}}', false)
  inputs:
    script: 'sudo dpkg -r libdeliveryoptimization-dev libdeliveryoptimization deliveryoptimization-agent'
  displayName: 'Remove installed packages'

- task: CopyFiles@2
  inputs:
    SourceFolder: '/tmp/build-deliveryoptimization-sdk-${{parameters.targetOsArch}}/linux-${{parameters.config}}'
    Contents: |
      libdeliveryoptimization*.deb
    TargetFolder: '$(Build.ArtifactStagingDirectory)/sdk-${{parameters.targetOsArch}}-${{parameters.config}}'
    CleanTargetFolder: true
  displayName: 'Populate artifacts staging dir'

- task: CopyFiles@2
  condition: eq('${{parameters.config}}', 'minsizerel')
  inputs:
    SourceFolder: '/tmp/build-deliveryoptimization-sdk-${{parameters.targetOsArch}}/linux-${{parameters.config}}'
    Contents: |
      sdk-cpp/libdeliveryoptimization*.dbg
    TargetFolder: '$(Build.ArtifactStagingDirectory)/sdk-${{parameters.targetOsArch}}-${{parameters.config}}'
  displayName: 'Populate debug symbols to staging dir'
