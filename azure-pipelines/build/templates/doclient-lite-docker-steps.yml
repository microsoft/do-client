# Template: Steps to build DO Agent using docker to target non-native OS and/or architecture.
# Consume this steps template in one or more jobs by passing in parameter values.

parameters:
- name: targetOS        # example: debian10
  type: string
- name: targetArch      # example: arm32
  type: string
- name: config          # debug/release/minsizerel/relwithdebuginfo
  type: string

variables:
- name: targetOsArch
  value: ${{parameters-targetOS}}-${{parameters.targetArch}}

steps:
- task: Docker@2
  displayName: Login to ACR
  inputs:
    command: login
    containerRegistry: doclientcontainerregistry
    repository: $(parameters.dockerImageName)

- task: Docker@2
  displayName: Pull latest build image
  inputs:
    command: pull
    containerRegistry: doclientcontainerregistry
    arguments: 'doclientcontainerregistry.azurecr.io/${{parameters.targetOsArch}}:latest'

# TODO(jimson): Once these are onboarded as an artifact to Image Factory, can remove the below two steps
# Another alternative is to just do the build from within a docker container, and then run the tests on the host
- task: CmdLine@2
  inputs:
    script: 'chmod +x bootstrap.sh'
    workingDirectory: '$(Build.SourcesDirectory)/build/bootstrap'
  displayName: 'chmod bootstrap script'

- task: CmdLine@2
  inputs:
    script: 'sudo ./bootstrap.sh --platform ${{parameters.targetOS}} --install qemu'
    workingDirectory: '$(Build.SourcesDirectory)/build'
  displayName: 'Install & register QEMU'

- task: CmdLine@2
  inputs:
  # Unix Makefiles used in place of Ninja due to issues with 32-bit compatability on cross-arch builds
    script: 'sudo docker run --rm --entrypoint=python3 -v $(Build.SourcesDirectory):/code -v /tmp/build-deliveryoptimization-agent-${{parameters.targetOsArch}}:/tmp/build-deliveryoptimization-agent doclientcontainerregistry.azurecr.io/${{parameters.dockerImageName}}:latest "/code/build/build.py" "--clean" "--package-for" "DEB" "--config" "${{parameters.config}}" "--project" "agent"'
  displayName: 'Build client-lite ${{parameters.targetOsArch}}-${{parameters.config}}'

- task: CopyFiles@2
  inputs:
    SourceFolder: '/tmp/build-deliveryoptimization-agent-${{parameters.targetOsArch}}/linux-${{parameters.config}}'
    Contents: |
      deliveryoptimization-agent*.deb
    TargetFolder: '$(Build.ArtifactStagingDirectory)/${{parameters.targetOsArch}}-${{parameters.config}}'
    CleanTargetFolder: true
  displayName: 'Populate artifacts staging dir'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'deliveryoptimization-agent'
    publishLocation: 'Container'
