# Template: Steps to build DO Agent using docker to target non-native OS and/or architecture.
# Consume this steps template in one or more jobs by passing in parameter values.

parameters:
- name: targetOsArch    # example: debian10-arm32
  type: string
- name: dockerImageName # example: jimsonmsft/debian10-arm32:latest
  type: string
- name: config          # debug/release/minsizerel/relwithdebuginfo
  type: string

resources:
  containers:
    - container: debian9-arm32
      image: doclientcontainerregistry.azurecr.io/debian9-arm32:latest
      endpoint: doclientcontainerregistry

steps:
# Once these are onboarded as an artifact to Image Factory, can remove the below two steps
- task: CmdLine@2
  inputs:
    script: 'chmod +x bootstrap.sh'
    workingDirectory: '$(Build.SourcesDirectory)/build/bootstrap'
  displayName: 'chmod bootstrap script'

- task: CmdLine@2
  inputs:
    script: 'sudo ./bootstrap.sh'
    workingDirectory: '$(Build.SourcesDirectory)/build/bootstrap'
  displayName: 'Install Dependencies'

- task: Docker@2
  displayName: Login to ACR
  inputs:
    command: login
    containerRegistry: doclientcontainerregistry

- script: | 
    sudo docker pull doclientcontainerregistry.azurecr.io/debian9-arm32:latest

- task: CmdLine@2
  inputs:
  # Unix Makefiles used in place of Ninja due to issues with 32-bit compatability on cross-arch builds
    script: 'sudo docker run --rm --entrypoint=python3 -v $(Build.SourcesDirectory):/code -v /tmp/build-deliveryoptimization-agent-${{parameters.targetOsArch}}:/tmp/build-deliveryoptimization-agent ${{parameters.dockerImageName}} "/code/build/build.py" "--clean" "--package-for" "DEB" "--generator" "Unix Makefiles" "--config" "${{parameters.config}}" "--project" "agent"'
  displayName: 'Build client-lite ${{parameters.targetOsArch}}-${{parameters.config}}'

- task: CopyFiles@2
  inputs:
    SourceFolder: '/tmp/build-deliveryoptimization-agent-${{parameters.targetOsArch}}/linux-${{parameters.config}}'
    Contents: |
      deliveryoptimization-agent*.deb
    TargetFolder: '$(Build.ArtifactStagingDirectory)/${{parameters.targetOsArch}}-${{parameters.config}}'
    CleanTargetFolder: true
  displayName: 'Populate artifacts staging dir'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'deliveryoptimization-agent'
    publishLocation: 'Container'
