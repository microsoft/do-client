# Template: Steps to build DO C++ SDK using docker to target non-native OS and/or architecture.
# Consume this steps template in one or more jobs by passing in parameter values.

parameters:
- name: targetOS        # example: ubuntu18.04
  type: string
- name: targetOsArch    # example: ubuntu18.04-x64
  type: string
- name: config          # debug/release
  type: string

steps:
# TODO(jimson): Once these are onboarded as an artifact to Image Factory, can remove all dependency install steps
- task: CmdLine@2
  inputs:
    script: 'chmod +x bootstrap.sh'
    workingDirectory: '$(Build.SourcesDirectory)/build'
  displayName: 'chmod bootstrap script'

# This needs to run as the current $USER in order for the docker pull to work (no sudo)
- task: CmdLine@2
  inputs:
    script: 'sudo ./bootstrap.sh --platform ${{parameters.targetOS}} --install containertools'
    workingDirectory: '$(Build.SourcesDirectory)/build'
  displayName: 'Install Docker'

- task: CmdLine@2
  inputs:
    script: |
    usermod -aG docker $USER
    newgrp docker
  displayName: 'Install Docker rootless'

- task: Docker@2
  displayName: 'Login to ACR'
  inputs:
    command: login
    containerRegistry: doclientcontainerregistry
    repository: $(parameters.targetOsArch)

# This fails because no auth (needs to use the CLI docker)
#- task: CmdLine@2
#  inputs:
#    script: 'sudo docker pull doclientcontainerregistry.azurecr.io/${{parameters.targetOsArch}}:latest'
#  displayName: 'Pull latest build image'

# This fails because no sudo, try to get docker to be runnable without sudo
# TODO: can get around this by using microsoft hosted agent
- task: Docker@2
  displayName: Pull latest build image
  inputs:
    command: pull
    containerRegistry: doclientcontainerregistry
    arguments: 'doclientcontainerregistry.azurecr.io/${{parameters.targetOsArch}}:latest'

- task: CmdLine@2
  inputs:
    script: 'sudo ./bootstrap.sh --platform ${{parameters.targetOS}} --install qemu'
    workingDirectory: '$(Build.SourcesDirectory)/build'
  displayName: 'Install & register QEMU'

- task: CmdLine@2
  inputs:
  # Unix Makefiles used in place of Ninja due to issues with 32-bit compatability on cross-arch builds
    script: 'sudo docker run --rm --entrypoint=python3 -v $(Build.SourcesDirectory):/code -v /tmp/build-deliveryoptimization-sdk-${{parameters.targetOsArch}}:/tmp/build-deliveryoptimization-sdk doclientcontainerregistry.azurecr.io/${{parameters.targetOsArch}}:latest "/code/build/build.py" "--clean" "--package-for" "DEB" "--generator" "Unix Makefiles" "--config" "${{parameters.config}}" "--project" "sdk" "--cmaketarget" "deliveryoptimization"'
  displayName: 'Build sdk-cpp ${{parameters.targetOsArch}}-${{parameters.config}}'

- task: CopyFiles@2
  inputs:
    SourceFolder: '/tmp/build-deliveryoptimization-sdk-${{parameters.targetOsArch}}/linux-${{parameters.config}}'
    Contents: |
      libdeliveryoptimization*.deb
    TargetFolder: '$(Build.ArtifactStagingDirectory)/${{parameters.targetOsArch}}-${{parameters.config}}'
    CleanTargetFolder: true
  displayName: 'Populate artifacts staging dir'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'deliveryoptimization-sdk'
    publishLocation: 'Container'
