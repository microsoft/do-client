# Template: Steps to build DO Plugins targeting x86-64 architecture.
# Consume this steps template in one or more jobs by passing in parameter values.

parameters:
- name: targetOS        # example: ubuntu18.04
  type: string
- name: targetOsArch    # example: ubuntu18.04-x64
  type: string
- name: config          # debug/release/minsizerel/relwithdebuginfo
  type: string

steps:
- checkout: self

# TODO(jimson): Once these are onboarded as an artifact to Image Factory, can remove the below two steps
# Another alternative is to just do the build from within a docker container, and then run the tests on the host
- task: CmdLine@2
  inputs:
    script: 'chmod +x bootstrap.sh'
    workingDirectory: '$(Build.SourcesDirectory)/build/bootstrap'
  displayName: 'chmod bootstrap script'

- task: CmdLine@2
  inputs:
    script: 'sudo ./bootstrap.sh --platform ${{parameters.targetOs}'
    workingDirectory: '$(Build.SourcesDirectory)/build'
  displayName: 'Install Dependencies'

# Have to use cmdline rather than built in python task, because the python env variable chooses python2
# There is a pipeline task which allows you to specify version, but that requires configuring of the agent tools directory
- task: CmdLine@2
  inputs:
    script: 'python3 ./build.py --project sdk --config ${{parameters.config}} --package-for DEB --clean'
    workingDirectory: '$(Build.SourcesDirectory)/build'
  displayName: 'Build sdk ${{parameters.targetOsArch}}-${{parameters.config}}'

#TODO(jimson): why did this have --cmaketarget flag?
#- task: PythonScript@0
#  inputs:
#    scriptSource: 'filePath'
#    scriptPath: 'build/build.py'
#    arguments: '--project sdk --cmaketarget deliveryoptimization --config ${{parameters.config}} --package-for DEB --clean '
#  displayName: 'Build sdk ${{parameters.targetOsArch}}-${{parameters.config}}'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'sudo dpkg --ignore-depends=deliveryoptimization-agent -i libdeliveryoptimization*.deb'
    workingDirectory: '/tmp/build-deliveryoptimization-sdk/linux-${{parameters.config}}'
  displayName: 'Install libdeliveryoptimization'

# Have to use cmdline rather than built in python task, because the python env variable chooses python2
# There is a pipeline task which allows you to specify version, but that requires configuring of the agent tools directory
- task: CmdLine@2
  inputs:
    script: 'python3 ./build.py --project plugin-apt --config ${{parameters.config}} --package-for DEB --clean'
    workingDirectory: '$(Build.SourcesDirectory)/build'
  displayName: 'Build deliveryoptimization-plugin-apt ${{parameters.targetOsArch}}-${{parameters.config}}'

#- task: PythonScript@0
#  inputs:
#    scriptSource: 'filePath'
#    scriptPath: 'build/build.py'
#    arguments: '--project plugin-apt --config ${{parameters.config}} --package-for DEB --clean'
#  displayName: 'Build deliveryoptimization-plugin-apt ${{parameters.targetOsArch}}-${{parameters.config}}'

- task: Bash@3
  condition: eq('${{parameters.config}}', 'minsizerel')
  inputs:
    targetType: 'filePath'
    filePath: 'build/check_binary_size.sh'
    arguments: '/tmp/build-deliveryoptimization-plugin-apt/linux-${{parameters.config}}/plugins/linux-apt/deliveryoptimization-plugin-apt 172168'
  displayName: 'Limit binary size increase'

- task: CmdLine@2
  inputs:
    script: 'sudo dpkg -i deliveryoptimization-plugin-apt*.deb'
    workingDirectory: '/tmp/build-deliveryoptimization-plugin-apt/linux-${{parameters.config}}'
  displayName: 'Install deliveryoptimization-plugin-apt'

- task: CmdLine@2
  inputs:
    script: 'sudo dpkg -r libdeliveryoptimization-dev deliveryoptimization-plugin-apt libdeliveryoptimization'
  displayName: 'Remove Packages'

- task: CopyFiles@2
  inputs:
    SourceFolder: '/tmp/build-deliveryoptimization-plugin-apt/linux-${{parameters.config}}'
    Contents: |
      deliveryoptimization-plugin-apt*.deb
    TargetFolder: '$(Build.ArtifactStagingDirectory)/${{parameters.targetOsArch}}-${{parameters.config}}'
    CleanTargetFolder: true
  displayName: 'Populate artifacts staging dir'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'deliveryoptimization-plugin-apt'
    publishLocation: 'Container'

# TODO(jimson) Azure artifacts are no longer free to publish to, this task will fail as a result, bug to resolve issue here:
# https://microsoft.visualstudio.com/OS/_workitems/edit/30317524
#
#  - task: UniversalPackages@0
#    inputs:
#      command: 'publish'
#      publishDirectory: '$(Build.ArtifactStagingDirectory)'
#      feedsToUsePublish: 'internal'
#      vstsFeedPublish: 'a6e08e1f-d299-4d2f-aaa5-db7ddde849e0'
#      publishPackageMetadata: false
#      vstsFeedPackagePublish: 'deliveryoptimization-plugin-apt'
#      versionOption: 'custom'
#      versionPublish: '$(test.package.version)'
#    displayName: 'Publish artifacts to test feed'
